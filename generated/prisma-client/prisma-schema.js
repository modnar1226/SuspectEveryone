module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Account {
  id: Int!
  accountCustomValues(where: AccountCustomValueWhereInput, orderBy: AccountCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccountCustomValue!]
  city: String!
  createdAt: DateTime
  name: String!
  org: Org!
  primaryContact: Contact!
  primaryEmail: String!
  primaryPhone: String!
  state: String!
  streetAddress: String!
  updatedAt: DateTime
  zip: String!
}

type AccountConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  id: Int
  accountCustomValues: AccountCustomValueCreateManyWithoutAccountInput
  city: String!
  name: String!
  org: OrgCreateOneWithoutAccountsInput!
  primaryContact: ContactCreateOneWithoutAccountsInput!
  primaryEmail: String!
  primaryPhone: String!
  state: String!
  streetAddress: String!
  zip: String!
}

input AccountCreateManyWithoutOrgInput {
  create: [AccountCreateWithoutOrgInput!]
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateManyWithoutPrimaryContactInput {
  create: [AccountCreateWithoutPrimaryContactInput!]
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateOneWithoutAccountCustomValuesInput {
  create: AccountCreateWithoutAccountCustomValuesInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutAccountCustomValuesInput {
  id: Int
  city: String!
  name: String!
  org: OrgCreateOneWithoutAccountsInput!
  primaryContact: ContactCreateOneWithoutAccountsInput!
  primaryEmail: String!
  primaryPhone: String!
  state: String!
  streetAddress: String!
  zip: String!
}

input AccountCreateWithoutOrgInput {
  id: Int
  accountCustomValues: AccountCustomValueCreateManyWithoutAccountInput
  city: String!
  name: String!
  primaryContact: ContactCreateOneWithoutAccountsInput!
  primaryEmail: String!
  primaryPhone: String!
  state: String!
  streetAddress: String!
  zip: String!
}

input AccountCreateWithoutPrimaryContactInput {
  id: Int
  accountCustomValues: AccountCustomValueCreateManyWithoutAccountInput
  city: String!
  name: String!
  org: OrgCreateOneWithoutAccountsInput!
  primaryEmail: String!
  primaryPhone: String!
  state: String!
  streetAddress: String!
  zip: String!
}

type AccountCustomField {
  id: Int!
  accountCustomValues(where: AccountCustomValueWhereInput, orderBy: AccountCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccountCustomValue!]
  createdAt: DateTime
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  org: Org!
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
  updatedAt: DateTime
}

type AccountCustomFieldConnection {
  pageInfo: PageInfo!
  edges: [AccountCustomFieldEdge]!
  aggregate: AggregateAccountCustomField!
}

input AccountCustomFieldCreateInput {
  id: Int
  accountCustomValues: AccountCustomValueCreateManyWithoutAccountCustomFieldInput
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  org: OrgCreateOneWithoutAccountCustomFieldsInput!
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
}

input AccountCustomFieldCreateManyWithoutOrgInput {
  create: [AccountCustomFieldCreateWithoutOrgInput!]
  connect: [AccountCustomFieldWhereUniqueInput!]
}

input AccountCustomFieldCreateOneWithoutAccountCustomValuesInput {
  create: AccountCustomFieldCreateWithoutAccountCustomValuesInput
  connect: AccountCustomFieldWhereUniqueInput
}

input AccountCustomFieldCreateWithoutAccountCustomValuesInput {
  id: Int
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  org: OrgCreateOneWithoutAccountCustomFieldsInput!
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
}

input AccountCustomFieldCreateWithoutOrgInput {
  id: Int
  accountCustomValues: AccountCustomValueCreateManyWithoutAccountCustomFieldInput
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
}

type AccountCustomFieldEdge {
  node: AccountCustomField!
  cursor: String!
}

enum AccountCustomFieldOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  fieldName_ASC
  fieldName_DESC
  label_ASC
  label_DESC
  max_ASC
  max_DESC
  min_ASC
  min_DESC
  options_ASC
  options_DESC
  placeholder_ASC
  placeholder_DESC
  required_ASC
  required_DESC
  tag_ASC
  tag_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AccountCustomFieldPreviousValues {
  id: Int!
  createdAt: DateTime
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
  updatedAt: DateTime
}

input AccountCustomFieldScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  fieldName: String
  fieldName_not: String
  fieldName_in: [String!]
  fieldName_not_in: [String!]
  fieldName_lt: String
  fieldName_lte: String
  fieldName_gt: String
  fieldName_gte: String
  fieldName_contains: String
  fieldName_not_contains: String
  fieldName_starts_with: String
  fieldName_not_starts_with: String
  fieldName_ends_with: String
  fieldName_not_ends_with: String
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  max: String
  max_not: String
  max_in: [String!]
  max_not_in: [String!]
  max_lt: String
  max_lte: String
  max_gt: String
  max_gte: String
  max_contains: String
  max_not_contains: String
  max_starts_with: String
  max_not_starts_with: String
  max_ends_with: String
  max_not_ends_with: String
  min: String
  min_not: String
  min_in: [String!]
  min_not_in: [String!]
  min_lt: String
  min_lte: String
  min_gt: String
  min_gte: String
  min_contains: String
  min_not_contains: String
  min_starts_with: String
  min_not_starts_with: String
  min_ends_with: String
  min_not_ends_with: String
  placeholder: String
  placeholder_not: String
  placeholder_in: [String!]
  placeholder_not_in: [String!]
  placeholder_lt: String
  placeholder_lte: String
  placeholder_gt: String
  placeholder_gte: String
  placeholder_contains: String
  placeholder_not_contains: String
  placeholder_starts_with: String
  placeholder_not_starts_with: String
  placeholder_ends_with: String
  placeholder_not_ends_with: String
  required: Boolean
  required_not: Boolean
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AccountCustomFieldScalarWhereInput!]
  OR: [AccountCustomFieldScalarWhereInput!]
  NOT: [AccountCustomFieldScalarWhereInput!]
}

type AccountCustomFieldSubscriptionPayload {
  mutation: MutationType!
  node: AccountCustomField
  updatedFields: [String!]
  previousValues: AccountCustomFieldPreviousValues
}

input AccountCustomFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccountCustomFieldWhereInput
  AND: [AccountCustomFieldSubscriptionWhereInput!]
  OR: [AccountCustomFieldSubscriptionWhereInput!]
  NOT: [AccountCustomFieldSubscriptionWhereInput!]
}

input AccountCustomFieldUpdateInput {
  accountCustomValues: AccountCustomValueUpdateManyWithoutAccountCustomFieldInput
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  org: OrgUpdateOneRequiredWithoutAccountCustomFieldsInput
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input AccountCustomFieldUpdateManyDataInput {
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input AccountCustomFieldUpdateManyMutationInput {
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input AccountCustomFieldUpdateManyWithoutOrgInput {
  create: [AccountCustomFieldCreateWithoutOrgInput!]
  delete: [AccountCustomFieldWhereUniqueInput!]
  connect: [AccountCustomFieldWhereUniqueInput!]
  set: [AccountCustomFieldWhereUniqueInput!]
  disconnect: [AccountCustomFieldWhereUniqueInput!]
  update: [AccountCustomFieldUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [AccountCustomFieldUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [AccountCustomFieldScalarWhereInput!]
  updateMany: [AccountCustomFieldUpdateManyWithWhereNestedInput!]
}

input AccountCustomFieldUpdateManyWithWhereNestedInput {
  where: AccountCustomFieldScalarWhereInput!
  data: AccountCustomFieldUpdateManyDataInput!
}

input AccountCustomFieldUpdateOneRequiredWithoutAccountCustomValuesInput {
  create: AccountCustomFieldCreateWithoutAccountCustomValuesInput
  update: AccountCustomFieldUpdateWithoutAccountCustomValuesDataInput
  upsert: AccountCustomFieldUpsertWithoutAccountCustomValuesInput
  connect: AccountCustomFieldWhereUniqueInput
}

input AccountCustomFieldUpdateWithoutAccountCustomValuesDataInput {
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  org: OrgUpdateOneRequiredWithoutAccountCustomFieldsInput
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input AccountCustomFieldUpdateWithoutOrgDataInput {
  accountCustomValues: AccountCustomValueUpdateManyWithoutAccountCustomFieldInput
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input AccountCustomFieldUpdateWithWhereUniqueWithoutOrgInput {
  where: AccountCustomFieldWhereUniqueInput!
  data: AccountCustomFieldUpdateWithoutOrgDataInput!
}

input AccountCustomFieldUpsertWithoutAccountCustomValuesInput {
  update: AccountCustomFieldUpdateWithoutAccountCustomValuesDataInput!
  create: AccountCustomFieldCreateWithoutAccountCustomValuesInput!
}

input AccountCustomFieldUpsertWithWhereUniqueWithoutOrgInput {
  where: AccountCustomFieldWhereUniqueInput!
  update: AccountCustomFieldUpdateWithoutOrgDataInput!
  create: AccountCustomFieldCreateWithoutOrgInput!
}

input AccountCustomFieldWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  accountCustomValues_every: AccountCustomValueWhereInput
  accountCustomValues_some: AccountCustomValueWhereInput
  accountCustomValues_none: AccountCustomValueWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  fieldName: String
  fieldName_not: String
  fieldName_in: [String!]
  fieldName_not_in: [String!]
  fieldName_lt: String
  fieldName_lte: String
  fieldName_gt: String
  fieldName_gte: String
  fieldName_contains: String
  fieldName_not_contains: String
  fieldName_starts_with: String
  fieldName_not_starts_with: String
  fieldName_ends_with: String
  fieldName_not_ends_with: String
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  max: String
  max_not: String
  max_in: [String!]
  max_not_in: [String!]
  max_lt: String
  max_lte: String
  max_gt: String
  max_gte: String
  max_contains: String
  max_not_contains: String
  max_starts_with: String
  max_not_starts_with: String
  max_ends_with: String
  max_not_ends_with: String
  min: String
  min_not: String
  min_in: [String!]
  min_not_in: [String!]
  min_lt: String
  min_lte: String
  min_gt: String
  min_gte: String
  min_contains: String
  min_not_contains: String
  min_starts_with: String
  min_not_starts_with: String
  min_ends_with: String
  min_not_ends_with: String
  org: OrgWhereInput
  placeholder: String
  placeholder_not: String
  placeholder_in: [String!]
  placeholder_not_in: [String!]
  placeholder_lt: String
  placeholder_lte: String
  placeholder_gt: String
  placeholder_gte: String
  placeholder_contains: String
  placeholder_not_contains: String
  placeholder_starts_with: String
  placeholder_not_starts_with: String
  placeholder_ends_with: String
  placeholder_not_ends_with: String
  required: Boolean
  required_not: Boolean
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AccountCustomFieldWhereInput!]
  OR: [AccountCustomFieldWhereInput!]
  NOT: [AccountCustomFieldWhereInput!]
}

input AccountCustomFieldWhereUniqueInput {
  id: Int
}

type AccountCustomValue {
  id: Int!
  account: Account!
  accountCustomField: AccountCustomField!
  createdAt: DateTime
  updatedAt: DateTime
  value: String!
}

type AccountCustomValueConnection {
  pageInfo: PageInfo!
  edges: [AccountCustomValueEdge]!
  aggregate: AggregateAccountCustomValue!
}

input AccountCustomValueCreateInput {
  id: Int
  account: AccountCreateOneWithoutAccountCustomValuesInput!
  accountCustomField: AccountCustomFieldCreateOneWithoutAccountCustomValuesInput!
  value: String!
}

input AccountCustomValueCreateManyWithoutAccountCustomFieldInput {
  create: [AccountCustomValueCreateWithoutAccountCustomFieldInput!]
  connect: [AccountCustomValueWhereUniqueInput!]
}

input AccountCustomValueCreateManyWithoutAccountInput {
  create: [AccountCustomValueCreateWithoutAccountInput!]
  connect: [AccountCustomValueWhereUniqueInput!]
}

input AccountCustomValueCreateWithoutAccountCustomFieldInput {
  id: Int
  account: AccountCreateOneWithoutAccountCustomValuesInput!
  value: String!
}

input AccountCustomValueCreateWithoutAccountInput {
  id: Int
  accountCustomField: AccountCustomFieldCreateOneWithoutAccountCustomValuesInput!
  value: String!
}

type AccountCustomValueEdge {
  node: AccountCustomValue!
  cursor: String!
}

enum AccountCustomValueOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

type AccountCustomValuePreviousValues {
  id: Int!
  createdAt: DateTime
  updatedAt: DateTime
  value: String!
}

input AccountCustomValueScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [AccountCustomValueScalarWhereInput!]
  OR: [AccountCustomValueScalarWhereInput!]
  NOT: [AccountCustomValueScalarWhereInput!]
}

type AccountCustomValueSubscriptionPayload {
  mutation: MutationType!
  node: AccountCustomValue
  updatedFields: [String!]
  previousValues: AccountCustomValuePreviousValues
}

input AccountCustomValueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccountCustomValueWhereInput
  AND: [AccountCustomValueSubscriptionWhereInput!]
  OR: [AccountCustomValueSubscriptionWhereInput!]
  NOT: [AccountCustomValueSubscriptionWhereInput!]
}

input AccountCustomValueUpdateInput {
  account: AccountUpdateOneRequiredWithoutAccountCustomValuesInput
  accountCustomField: AccountCustomFieldUpdateOneRequiredWithoutAccountCustomValuesInput
  value: String
}

input AccountCustomValueUpdateManyDataInput {
  value: String
}

input AccountCustomValueUpdateManyMutationInput {
  value: String
}

input AccountCustomValueUpdateManyWithoutAccountCustomFieldInput {
  create: [AccountCustomValueCreateWithoutAccountCustomFieldInput!]
  delete: [AccountCustomValueWhereUniqueInput!]
  connect: [AccountCustomValueWhereUniqueInput!]
  set: [AccountCustomValueWhereUniqueInput!]
  disconnect: [AccountCustomValueWhereUniqueInput!]
  update: [AccountCustomValueUpdateWithWhereUniqueWithoutAccountCustomFieldInput!]
  upsert: [AccountCustomValueUpsertWithWhereUniqueWithoutAccountCustomFieldInput!]
  deleteMany: [AccountCustomValueScalarWhereInput!]
  updateMany: [AccountCustomValueUpdateManyWithWhereNestedInput!]
}

input AccountCustomValueUpdateManyWithoutAccountInput {
  create: [AccountCustomValueCreateWithoutAccountInput!]
  delete: [AccountCustomValueWhereUniqueInput!]
  connect: [AccountCustomValueWhereUniqueInput!]
  set: [AccountCustomValueWhereUniqueInput!]
  disconnect: [AccountCustomValueWhereUniqueInput!]
  update: [AccountCustomValueUpdateWithWhereUniqueWithoutAccountInput!]
  upsert: [AccountCustomValueUpsertWithWhereUniqueWithoutAccountInput!]
  deleteMany: [AccountCustomValueScalarWhereInput!]
  updateMany: [AccountCustomValueUpdateManyWithWhereNestedInput!]
}

input AccountCustomValueUpdateManyWithWhereNestedInput {
  where: AccountCustomValueScalarWhereInput!
  data: AccountCustomValueUpdateManyDataInput!
}

input AccountCustomValueUpdateWithoutAccountCustomFieldDataInput {
  account: AccountUpdateOneRequiredWithoutAccountCustomValuesInput
  value: String
}

input AccountCustomValueUpdateWithoutAccountDataInput {
  accountCustomField: AccountCustomFieldUpdateOneRequiredWithoutAccountCustomValuesInput
  value: String
}

input AccountCustomValueUpdateWithWhereUniqueWithoutAccountCustomFieldInput {
  where: AccountCustomValueWhereUniqueInput!
  data: AccountCustomValueUpdateWithoutAccountCustomFieldDataInput!
}

input AccountCustomValueUpdateWithWhereUniqueWithoutAccountInput {
  where: AccountCustomValueWhereUniqueInput!
  data: AccountCustomValueUpdateWithoutAccountDataInput!
}

input AccountCustomValueUpsertWithWhereUniqueWithoutAccountCustomFieldInput {
  where: AccountCustomValueWhereUniqueInput!
  update: AccountCustomValueUpdateWithoutAccountCustomFieldDataInput!
  create: AccountCustomValueCreateWithoutAccountCustomFieldInput!
}

input AccountCustomValueUpsertWithWhereUniqueWithoutAccountInput {
  where: AccountCustomValueWhereUniqueInput!
  update: AccountCustomValueUpdateWithoutAccountDataInput!
  create: AccountCustomValueCreateWithoutAccountInput!
}

input AccountCustomValueWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  account: AccountWhereInput
  accountCustomField: AccountCustomFieldWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [AccountCustomValueWhereInput!]
  OR: [AccountCustomValueWhereInput!]
  NOT: [AccountCustomValueWhereInput!]
}

input AccountCustomValueWhereUniqueInput {
  id: Int
}

type AccountEdge {
  node: Account!
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  primaryEmail_ASC
  primaryEmail_DESC
  primaryPhone_ASC
  primaryPhone_DESC
  state_ASC
  state_DESC
  streetAddress_ASC
  streetAddress_DESC
  updatedAt_ASC
  updatedAt_DESC
  zip_ASC
  zip_DESC
}

type AccountPreviousValues {
  id: Int!
  city: String!
  createdAt: DateTime
  name: String!
  primaryEmail: String!
  primaryPhone: String!
  state: String!
  streetAddress: String!
  updatedAt: DateTime
  zip: String!
}

input AccountScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  primaryEmail: String
  primaryEmail_not: String
  primaryEmail_in: [String!]
  primaryEmail_not_in: [String!]
  primaryEmail_lt: String
  primaryEmail_lte: String
  primaryEmail_gt: String
  primaryEmail_gte: String
  primaryEmail_contains: String
  primaryEmail_not_contains: String
  primaryEmail_starts_with: String
  primaryEmail_not_starts_with: String
  primaryEmail_ends_with: String
  primaryEmail_not_ends_with: String
  primaryPhone: String
  primaryPhone_not: String
  primaryPhone_in: [String!]
  primaryPhone_not_in: [String!]
  primaryPhone_lt: String
  primaryPhone_lte: String
  primaryPhone_gt: String
  primaryPhone_gte: String
  primaryPhone_contains: String
  primaryPhone_not_contains: String
  primaryPhone_starts_with: String
  primaryPhone_not_starts_with: String
  primaryPhone_ends_with: String
  primaryPhone_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  streetAddress: String
  streetAddress_not: String
  streetAddress_in: [String!]
  streetAddress_not_in: [String!]
  streetAddress_lt: String
  streetAddress_lte: String
  streetAddress_gt: String
  streetAddress_gte: String
  streetAddress_contains: String
  streetAddress_not_contains: String
  streetAddress_starts_with: String
  streetAddress_not_starts_with: String
  streetAddress_ends_with: String
  streetAddress_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  AND: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
  AND: [AccountSubscriptionWhereInput!]
  OR: [AccountSubscriptionWhereInput!]
  NOT: [AccountSubscriptionWhereInput!]
}

input AccountUpdateInput {
  accountCustomValues: AccountCustomValueUpdateManyWithoutAccountInput
  city: String
  name: String
  org: OrgUpdateOneRequiredWithoutAccountsInput
  primaryContact: ContactUpdateOneRequiredWithoutAccountsInput
  primaryEmail: String
  primaryPhone: String
  state: String
  streetAddress: String
  zip: String
}

input AccountUpdateManyDataInput {
  city: String
  name: String
  primaryEmail: String
  primaryPhone: String
  state: String
  streetAddress: String
  zip: String
}

input AccountUpdateManyMutationInput {
  city: String
  name: String
  primaryEmail: String
  primaryPhone: String
  state: String
  streetAddress: String
  zip: String
}

input AccountUpdateManyWithoutOrgInput {
  create: [AccountCreateWithoutOrgInput!]
  delete: [AccountWhereUniqueInput!]
  connect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [AccountScalarWhereInput!]
  updateMany: [AccountUpdateManyWithWhereNestedInput!]
}

input AccountUpdateManyWithoutPrimaryContactInput {
  create: [AccountCreateWithoutPrimaryContactInput!]
  delete: [AccountWhereUniqueInput!]
  connect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutPrimaryContactInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutPrimaryContactInput!]
  deleteMany: [AccountScalarWhereInput!]
  updateMany: [AccountUpdateManyWithWhereNestedInput!]
}

input AccountUpdateManyWithWhereNestedInput {
  where: AccountScalarWhereInput!
  data: AccountUpdateManyDataInput!
}

input AccountUpdateOneRequiredWithoutAccountCustomValuesInput {
  create: AccountCreateWithoutAccountCustomValuesInput
  update: AccountUpdateWithoutAccountCustomValuesDataInput
  upsert: AccountUpsertWithoutAccountCustomValuesInput
  connect: AccountWhereUniqueInput
}

input AccountUpdateWithoutAccountCustomValuesDataInput {
  city: String
  name: String
  org: OrgUpdateOneRequiredWithoutAccountsInput
  primaryContact: ContactUpdateOneRequiredWithoutAccountsInput
  primaryEmail: String
  primaryPhone: String
  state: String
  streetAddress: String
  zip: String
}

input AccountUpdateWithoutOrgDataInput {
  accountCustomValues: AccountCustomValueUpdateManyWithoutAccountInput
  city: String
  name: String
  primaryContact: ContactUpdateOneRequiredWithoutAccountsInput
  primaryEmail: String
  primaryPhone: String
  state: String
  streetAddress: String
  zip: String
}

input AccountUpdateWithoutPrimaryContactDataInput {
  accountCustomValues: AccountCustomValueUpdateManyWithoutAccountInput
  city: String
  name: String
  org: OrgUpdateOneRequiredWithoutAccountsInput
  primaryEmail: String
  primaryPhone: String
  state: String
  streetAddress: String
  zip: String
}

input AccountUpdateWithWhereUniqueWithoutOrgInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutOrgDataInput!
}

input AccountUpdateWithWhereUniqueWithoutPrimaryContactInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutPrimaryContactDataInput!
}

input AccountUpsertWithoutAccountCustomValuesInput {
  update: AccountUpdateWithoutAccountCustomValuesDataInput!
  create: AccountCreateWithoutAccountCustomValuesInput!
}

input AccountUpsertWithWhereUniqueWithoutOrgInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutOrgDataInput!
  create: AccountCreateWithoutOrgInput!
}

input AccountUpsertWithWhereUniqueWithoutPrimaryContactInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutPrimaryContactDataInput!
  create: AccountCreateWithoutPrimaryContactInput!
}

input AccountWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  accountCustomValues_every: AccountCustomValueWhereInput
  accountCustomValues_some: AccountCustomValueWhereInput
  accountCustomValues_none: AccountCustomValueWhereInput
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  org: OrgWhereInput
  primaryContact: ContactWhereInput
  primaryEmail: String
  primaryEmail_not: String
  primaryEmail_in: [String!]
  primaryEmail_not_in: [String!]
  primaryEmail_lt: String
  primaryEmail_lte: String
  primaryEmail_gt: String
  primaryEmail_gte: String
  primaryEmail_contains: String
  primaryEmail_not_contains: String
  primaryEmail_starts_with: String
  primaryEmail_not_starts_with: String
  primaryEmail_ends_with: String
  primaryEmail_not_ends_with: String
  primaryPhone: String
  primaryPhone_not: String
  primaryPhone_in: [String!]
  primaryPhone_not_in: [String!]
  primaryPhone_lt: String
  primaryPhone_lte: String
  primaryPhone_gt: String
  primaryPhone_gte: String
  primaryPhone_contains: String
  primaryPhone_not_contains: String
  primaryPhone_starts_with: String
  primaryPhone_not_starts_with: String
  primaryPhone_ends_with: String
  primaryPhone_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  streetAddress: String
  streetAddress_not: String
  streetAddress_in: [String!]
  streetAddress_not_in: [String!]
  streetAddress_lt: String
  streetAddress_lte: String
  streetAddress_gt: String
  streetAddress_gte: String
  streetAddress_contains: String
  streetAddress_not_contains: String
  streetAddress_starts_with: String
  streetAddress_not_starts_with: String
  streetAddress_ends_with: String
  streetAddress_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  id: Int
}

type Admin {
  id: Int!
  address: String!
  city: String!
  createdAt: DateTime
  email: String!
  first: String!
  isSuper: Boolean!
  last: String!
  password: String!
  rememberToken: String
  state: String!
  updatedAt: DateTime
  zip: String!
}

type AdminConnection {
  pageInfo: PageInfo!
  edges: [AdminEdge]!
  aggregate: AggregateAdmin!
}

input AdminCreateInput {
  id: Int
  address: String!
  city: String!
  email: String!
  first: String!
  isSuper: Boolean
  last: String!
  password: String!
  rememberToken: String
  state: String!
  zip: String!
}

type AdminEdge {
  node: Admin!
  cursor: String!
}

enum AdminOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  first_ASC
  first_DESC
  isSuper_ASC
  isSuper_DESC
  last_ASC
  last_DESC
  password_ASC
  password_DESC
  rememberToken_ASC
  rememberToken_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
  zip_ASC
  zip_DESC
}

type AdminPreviousValues {
  id: Int!
  address: String!
  city: String!
  createdAt: DateTime
  email: String!
  first: String!
  isSuper: Boolean!
  last: String!
  password: String!
  rememberToken: String
  state: String!
  updatedAt: DateTime
  zip: String!
}

type AdminSubscriptionPayload {
  mutation: MutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

input AdminSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminWhereInput
  AND: [AdminSubscriptionWhereInput!]
  OR: [AdminSubscriptionWhereInput!]
  NOT: [AdminSubscriptionWhereInput!]
}

input AdminUpdateInput {
  address: String
  city: String
  email: String
  first: String
  isSuper: Boolean
  last: String
  password: String
  rememberToken: String
  state: String
  zip: String
}

input AdminUpdateManyMutationInput {
  address: String
  city: String
  email: String
  first: String
  isSuper: Boolean
  last: String
  password: String
  rememberToken: String
  state: String
  zip: String
}

input AdminWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  first: String
  first_not: String
  first_in: [String!]
  first_not_in: [String!]
  first_lt: String
  first_lte: String
  first_gt: String
  first_gte: String
  first_contains: String
  first_not_contains: String
  first_starts_with: String
  first_not_starts_with: String
  first_ends_with: String
  first_not_ends_with: String
  isSuper: Boolean
  isSuper_not: Boolean
  last: String
  last_not: String
  last_in: [String!]
  last_not_in: [String!]
  last_lt: String
  last_lte: String
  last_gt: String
  last_gte: String
  last_contains: String
  last_not_contains: String
  last_starts_with: String
  last_not_starts_with: String
  last_ends_with: String
  last_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  rememberToken: String
  rememberToken_not: String
  rememberToken_in: [String!]
  rememberToken_not_in: [String!]
  rememberToken_lt: String
  rememberToken_lte: String
  rememberToken_gt: String
  rememberToken_gte: String
  rememberToken_contains: String
  rememberToken_not_contains: String
  rememberToken_starts_with: String
  rememberToken_not_starts_with: String
  rememberToken_ends_with: String
  rememberToken_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input AdminWhereUniqueInput {
  id: Int
  email: String
}

type AggregateAccount {
  count: Int!
}

type AggregateAccountCustomField {
  count: Int!
}

type AggregateAccountCustomValue {
  count: Int!
}

type AggregateAdmin {
  count: Int!
}

type AggregateContact {
  count: Int!
}

type AggregateContactCustomField {
  count: Int!
}

type AggregateContactCustomValue {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type AggregateMigration {
  count: Int!
}

type AggregateOrg {
  count: Int!
}

type AggregatePasswordReset {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Contact {
  id: Int!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account!]
  city: String
  contactCustomValues(where: ContactCustomValueWhereInput, orderBy: ContactCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactCustomValue!]
  createdAt: DateTime
  email: String
  first: String!
  last: String!
  middle: String
  org: Org!
  phone: String
  state: String!
  streetAddress: String
  updatedAt: DateTime
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  zip: String
}

type ContactConnection {
  pageInfo: PageInfo!
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  id: Int
  accounts: AccountCreateManyWithoutPrimaryContactInput
  city: String
  contactCustomValues: ContactCustomValueCreateManyWithoutContactInput
  email: String
  first: String!
  last: String!
  middle: String
  org: OrgCreateOneWithoutContactsInput!
  phone: String
  state: String!
  streetAddress: String
  users: UserCreateManyWithoutContactInput
  zip: String
}

input ContactCreateManyWithoutOrgInput {
  create: [ContactCreateWithoutOrgInput!]
  connect: [ContactWhereUniqueInput!]
}

input ContactCreateOneWithoutAccountsInput {
  create: ContactCreateWithoutAccountsInput
  connect: ContactWhereUniqueInput
}

input ContactCreateOneWithoutContactCustomValuesInput {
  create: ContactCreateWithoutContactCustomValuesInput
  connect: ContactWhereUniqueInput
}

input ContactCreateOneWithoutUsersInput {
  create: ContactCreateWithoutUsersInput
  connect: ContactWhereUniqueInput
}

input ContactCreateWithoutAccountsInput {
  id: Int
  city: String
  contactCustomValues: ContactCustomValueCreateManyWithoutContactInput
  email: String
  first: String!
  last: String!
  middle: String
  org: OrgCreateOneWithoutContactsInput!
  phone: String
  state: String!
  streetAddress: String
  users: UserCreateManyWithoutContactInput
  zip: String
}

input ContactCreateWithoutContactCustomValuesInput {
  id: Int
  accounts: AccountCreateManyWithoutPrimaryContactInput
  city: String
  email: String
  first: String!
  last: String!
  middle: String
  org: OrgCreateOneWithoutContactsInput!
  phone: String
  state: String!
  streetAddress: String
  users: UserCreateManyWithoutContactInput
  zip: String
}

input ContactCreateWithoutOrgInput {
  id: Int
  accounts: AccountCreateManyWithoutPrimaryContactInput
  city: String
  contactCustomValues: ContactCustomValueCreateManyWithoutContactInput
  email: String
  first: String!
  last: String!
  middle: String
  phone: String
  state: String!
  streetAddress: String
  users: UserCreateManyWithoutContactInput
  zip: String
}

input ContactCreateWithoutUsersInput {
  id: Int
  accounts: AccountCreateManyWithoutPrimaryContactInput
  city: String
  contactCustomValues: ContactCustomValueCreateManyWithoutContactInput
  email: String
  first: String!
  last: String!
  middle: String
  org: OrgCreateOneWithoutContactsInput!
  phone: String
  state: String!
  streetAddress: String
  zip: String
}

type ContactCustomField {
  id: Int!
  contactCustomValues(where: ContactCustomValueWhereInput, orderBy: ContactCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactCustomValue!]
  createdAt: DateTime
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  org: Org!
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
  updatedAt: DateTime
}

type ContactCustomFieldConnection {
  pageInfo: PageInfo!
  edges: [ContactCustomFieldEdge]!
  aggregate: AggregateContactCustomField!
}

input ContactCustomFieldCreateInput {
  id: Int
  contactCustomValues: ContactCustomValueCreateManyWithoutContactCustomFieldInput
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  org: OrgCreateOneWithoutContactCustomFieldsInput!
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
}

input ContactCustomFieldCreateManyWithoutOrgInput {
  create: [ContactCustomFieldCreateWithoutOrgInput!]
  connect: [ContactCustomFieldWhereUniqueInput!]
}

input ContactCustomFieldCreateOneWithoutContactCustomValuesInput {
  create: ContactCustomFieldCreateWithoutContactCustomValuesInput
  connect: ContactCustomFieldWhereUniqueInput
}

input ContactCustomFieldCreateWithoutContactCustomValuesInput {
  id: Int
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  org: OrgCreateOneWithoutContactCustomFieldsInput!
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
}

input ContactCustomFieldCreateWithoutOrgInput {
  id: Int
  contactCustomValues: ContactCustomValueCreateManyWithoutContactCustomFieldInput
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
}

type ContactCustomFieldEdge {
  node: ContactCustomField!
  cursor: String!
}

enum ContactCustomFieldOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  fieldName_ASC
  fieldName_DESC
  label_ASC
  label_DESC
  max_ASC
  max_DESC
  min_ASC
  min_DESC
  options_ASC
  options_DESC
  placeholder_ASC
  placeholder_DESC
  required_ASC
  required_DESC
  tag_ASC
  tag_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContactCustomFieldPreviousValues {
  id: Int!
  createdAt: DateTime
  fieldName: String!
  label: String!
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
  updatedAt: DateTime
}

input ContactCustomFieldScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  fieldName: String
  fieldName_not: String
  fieldName_in: [String!]
  fieldName_not_in: [String!]
  fieldName_lt: String
  fieldName_lte: String
  fieldName_gt: String
  fieldName_gte: String
  fieldName_contains: String
  fieldName_not_contains: String
  fieldName_starts_with: String
  fieldName_not_starts_with: String
  fieldName_ends_with: String
  fieldName_not_ends_with: String
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  max: String
  max_not: String
  max_in: [String!]
  max_not_in: [String!]
  max_lt: String
  max_lte: String
  max_gt: String
  max_gte: String
  max_contains: String
  max_not_contains: String
  max_starts_with: String
  max_not_starts_with: String
  max_ends_with: String
  max_not_ends_with: String
  min: String
  min_not: String
  min_in: [String!]
  min_not_in: [String!]
  min_lt: String
  min_lte: String
  min_gt: String
  min_gte: String
  min_contains: String
  min_not_contains: String
  min_starts_with: String
  min_not_starts_with: String
  min_ends_with: String
  min_not_ends_with: String
  placeholder: String
  placeholder_not: String
  placeholder_in: [String!]
  placeholder_not_in: [String!]
  placeholder_lt: String
  placeholder_lte: String
  placeholder_gt: String
  placeholder_gte: String
  placeholder_contains: String
  placeholder_not_contains: String
  placeholder_starts_with: String
  placeholder_not_starts_with: String
  placeholder_ends_with: String
  placeholder_not_ends_with: String
  required: Boolean
  required_not: Boolean
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ContactCustomFieldScalarWhereInput!]
  OR: [ContactCustomFieldScalarWhereInput!]
  NOT: [ContactCustomFieldScalarWhereInput!]
}

type ContactCustomFieldSubscriptionPayload {
  mutation: MutationType!
  node: ContactCustomField
  updatedFields: [String!]
  previousValues: ContactCustomFieldPreviousValues
}

input ContactCustomFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactCustomFieldWhereInput
  AND: [ContactCustomFieldSubscriptionWhereInput!]
  OR: [ContactCustomFieldSubscriptionWhereInput!]
  NOT: [ContactCustomFieldSubscriptionWhereInput!]
}

input ContactCustomFieldUpdateInput {
  contactCustomValues: ContactCustomValueUpdateManyWithoutContactCustomFieldInput
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  org: OrgUpdateOneRequiredWithoutContactCustomFieldsInput
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input ContactCustomFieldUpdateManyDataInput {
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input ContactCustomFieldUpdateManyMutationInput {
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input ContactCustomFieldUpdateManyWithoutOrgInput {
  create: [ContactCustomFieldCreateWithoutOrgInput!]
  delete: [ContactCustomFieldWhereUniqueInput!]
  connect: [ContactCustomFieldWhereUniqueInput!]
  set: [ContactCustomFieldWhereUniqueInput!]
  disconnect: [ContactCustomFieldWhereUniqueInput!]
  update: [ContactCustomFieldUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [ContactCustomFieldUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [ContactCustomFieldScalarWhereInput!]
  updateMany: [ContactCustomFieldUpdateManyWithWhereNestedInput!]
}

input ContactCustomFieldUpdateManyWithWhereNestedInput {
  where: ContactCustomFieldScalarWhereInput!
  data: ContactCustomFieldUpdateManyDataInput!
}

input ContactCustomFieldUpdateOneRequiredWithoutContactCustomValuesInput {
  create: ContactCustomFieldCreateWithoutContactCustomValuesInput
  update: ContactCustomFieldUpdateWithoutContactCustomValuesDataInput
  upsert: ContactCustomFieldUpsertWithoutContactCustomValuesInput
  connect: ContactCustomFieldWhereUniqueInput
}

input ContactCustomFieldUpdateWithoutContactCustomValuesDataInput {
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  org: OrgUpdateOneRequiredWithoutContactCustomFieldsInput
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input ContactCustomFieldUpdateWithoutOrgDataInput {
  contactCustomValues: ContactCustomValueUpdateManyWithoutContactCustomFieldInput
  fieldName: String
  label: String
  max: String
  min: String
  options: Json
  placeholder: String
  required: Boolean
  tag: String
  type: String
}

input ContactCustomFieldUpdateWithWhereUniqueWithoutOrgInput {
  where: ContactCustomFieldWhereUniqueInput!
  data: ContactCustomFieldUpdateWithoutOrgDataInput!
}

input ContactCustomFieldUpsertWithoutContactCustomValuesInput {
  update: ContactCustomFieldUpdateWithoutContactCustomValuesDataInput!
  create: ContactCustomFieldCreateWithoutContactCustomValuesInput!
}

input ContactCustomFieldUpsertWithWhereUniqueWithoutOrgInput {
  where: ContactCustomFieldWhereUniqueInput!
  update: ContactCustomFieldUpdateWithoutOrgDataInput!
  create: ContactCustomFieldCreateWithoutOrgInput!
}

input ContactCustomFieldWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  contactCustomValues_every: ContactCustomValueWhereInput
  contactCustomValues_some: ContactCustomValueWhereInput
  contactCustomValues_none: ContactCustomValueWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  fieldName: String
  fieldName_not: String
  fieldName_in: [String!]
  fieldName_not_in: [String!]
  fieldName_lt: String
  fieldName_lte: String
  fieldName_gt: String
  fieldName_gte: String
  fieldName_contains: String
  fieldName_not_contains: String
  fieldName_starts_with: String
  fieldName_not_starts_with: String
  fieldName_ends_with: String
  fieldName_not_ends_with: String
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  max: String
  max_not: String
  max_in: [String!]
  max_not_in: [String!]
  max_lt: String
  max_lte: String
  max_gt: String
  max_gte: String
  max_contains: String
  max_not_contains: String
  max_starts_with: String
  max_not_starts_with: String
  max_ends_with: String
  max_not_ends_with: String
  min: String
  min_not: String
  min_in: [String!]
  min_not_in: [String!]
  min_lt: String
  min_lte: String
  min_gt: String
  min_gte: String
  min_contains: String
  min_not_contains: String
  min_starts_with: String
  min_not_starts_with: String
  min_ends_with: String
  min_not_ends_with: String
  org: OrgWhereInput
  placeholder: String
  placeholder_not: String
  placeholder_in: [String!]
  placeholder_not_in: [String!]
  placeholder_lt: String
  placeholder_lte: String
  placeholder_gt: String
  placeholder_gte: String
  placeholder_contains: String
  placeholder_not_contains: String
  placeholder_starts_with: String
  placeholder_not_starts_with: String
  placeholder_ends_with: String
  placeholder_not_ends_with: String
  required: Boolean
  required_not: Boolean
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ContactCustomFieldWhereInput!]
  OR: [ContactCustomFieldWhereInput!]
  NOT: [ContactCustomFieldWhereInput!]
}

input ContactCustomFieldWhereUniqueInput {
  id: Int
}

type ContactCustomValue {
  id: Int!
  contact: Contact!
  contactCustomField: ContactCustomField!
  createdAt: DateTime
  org: Org!
  updatedAt: DateTime
  value: String!
}

type ContactCustomValueConnection {
  pageInfo: PageInfo!
  edges: [ContactCustomValueEdge]!
  aggregate: AggregateContactCustomValue!
}

input ContactCustomValueCreateInput {
  id: Int
  contact: ContactCreateOneWithoutContactCustomValuesInput!
  contactCustomField: ContactCustomFieldCreateOneWithoutContactCustomValuesInput!
  org: OrgCreateOneWithoutContactCustomValuesInput!
  value: String!
}

input ContactCustomValueCreateManyWithoutContactCustomFieldInput {
  create: [ContactCustomValueCreateWithoutContactCustomFieldInput!]
  connect: [ContactCustomValueWhereUniqueInput!]
}

input ContactCustomValueCreateManyWithoutContactInput {
  create: [ContactCustomValueCreateWithoutContactInput!]
  connect: [ContactCustomValueWhereUniqueInput!]
}

input ContactCustomValueCreateManyWithoutOrgInput {
  create: [ContactCustomValueCreateWithoutOrgInput!]
  connect: [ContactCustomValueWhereUniqueInput!]
}

input ContactCustomValueCreateWithoutContactCustomFieldInput {
  id: Int
  contact: ContactCreateOneWithoutContactCustomValuesInput!
  org: OrgCreateOneWithoutContactCustomValuesInput!
  value: String!
}

input ContactCustomValueCreateWithoutContactInput {
  id: Int
  contactCustomField: ContactCustomFieldCreateOneWithoutContactCustomValuesInput!
  org: OrgCreateOneWithoutContactCustomValuesInput!
  value: String!
}

input ContactCustomValueCreateWithoutOrgInput {
  id: Int
  contact: ContactCreateOneWithoutContactCustomValuesInput!
  contactCustomField: ContactCustomFieldCreateOneWithoutContactCustomValuesInput!
  value: String!
}

type ContactCustomValueEdge {
  node: ContactCustomValue!
  cursor: String!
}

enum ContactCustomValueOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

type ContactCustomValuePreviousValues {
  id: Int!
  createdAt: DateTime
  updatedAt: DateTime
  value: String!
}

input ContactCustomValueScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ContactCustomValueScalarWhereInput!]
  OR: [ContactCustomValueScalarWhereInput!]
  NOT: [ContactCustomValueScalarWhereInput!]
}

type ContactCustomValueSubscriptionPayload {
  mutation: MutationType!
  node: ContactCustomValue
  updatedFields: [String!]
  previousValues: ContactCustomValuePreviousValues
}

input ContactCustomValueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactCustomValueWhereInput
  AND: [ContactCustomValueSubscriptionWhereInput!]
  OR: [ContactCustomValueSubscriptionWhereInput!]
  NOT: [ContactCustomValueSubscriptionWhereInput!]
}

input ContactCustomValueUpdateInput {
  contact: ContactUpdateOneRequiredWithoutContactCustomValuesInput
  contactCustomField: ContactCustomFieldUpdateOneRequiredWithoutContactCustomValuesInput
  org: OrgUpdateOneRequiredWithoutContactCustomValuesInput
  value: String
}

input ContactCustomValueUpdateManyDataInput {
  value: String
}

input ContactCustomValueUpdateManyMutationInput {
  value: String
}

input ContactCustomValueUpdateManyWithoutContactCustomFieldInput {
  create: [ContactCustomValueCreateWithoutContactCustomFieldInput!]
  delete: [ContactCustomValueWhereUniqueInput!]
  connect: [ContactCustomValueWhereUniqueInput!]
  set: [ContactCustomValueWhereUniqueInput!]
  disconnect: [ContactCustomValueWhereUniqueInput!]
  update: [ContactCustomValueUpdateWithWhereUniqueWithoutContactCustomFieldInput!]
  upsert: [ContactCustomValueUpsertWithWhereUniqueWithoutContactCustomFieldInput!]
  deleteMany: [ContactCustomValueScalarWhereInput!]
  updateMany: [ContactCustomValueUpdateManyWithWhereNestedInput!]
}

input ContactCustomValueUpdateManyWithoutContactInput {
  create: [ContactCustomValueCreateWithoutContactInput!]
  delete: [ContactCustomValueWhereUniqueInput!]
  connect: [ContactCustomValueWhereUniqueInput!]
  set: [ContactCustomValueWhereUniqueInput!]
  disconnect: [ContactCustomValueWhereUniqueInput!]
  update: [ContactCustomValueUpdateWithWhereUniqueWithoutContactInput!]
  upsert: [ContactCustomValueUpsertWithWhereUniqueWithoutContactInput!]
  deleteMany: [ContactCustomValueScalarWhereInput!]
  updateMany: [ContactCustomValueUpdateManyWithWhereNestedInput!]
}

input ContactCustomValueUpdateManyWithoutOrgInput {
  create: [ContactCustomValueCreateWithoutOrgInput!]
  delete: [ContactCustomValueWhereUniqueInput!]
  connect: [ContactCustomValueWhereUniqueInput!]
  set: [ContactCustomValueWhereUniqueInput!]
  disconnect: [ContactCustomValueWhereUniqueInput!]
  update: [ContactCustomValueUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [ContactCustomValueUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [ContactCustomValueScalarWhereInput!]
  updateMany: [ContactCustomValueUpdateManyWithWhereNestedInput!]
}

input ContactCustomValueUpdateManyWithWhereNestedInput {
  where: ContactCustomValueScalarWhereInput!
  data: ContactCustomValueUpdateManyDataInput!
}

input ContactCustomValueUpdateWithoutContactCustomFieldDataInput {
  contact: ContactUpdateOneRequiredWithoutContactCustomValuesInput
  org: OrgUpdateOneRequiredWithoutContactCustomValuesInput
  value: String
}

input ContactCustomValueUpdateWithoutContactDataInput {
  contactCustomField: ContactCustomFieldUpdateOneRequiredWithoutContactCustomValuesInput
  org: OrgUpdateOneRequiredWithoutContactCustomValuesInput
  value: String
}

input ContactCustomValueUpdateWithoutOrgDataInput {
  contact: ContactUpdateOneRequiredWithoutContactCustomValuesInput
  contactCustomField: ContactCustomFieldUpdateOneRequiredWithoutContactCustomValuesInput
  value: String
}

input ContactCustomValueUpdateWithWhereUniqueWithoutContactCustomFieldInput {
  where: ContactCustomValueWhereUniqueInput!
  data: ContactCustomValueUpdateWithoutContactCustomFieldDataInput!
}

input ContactCustomValueUpdateWithWhereUniqueWithoutContactInput {
  where: ContactCustomValueWhereUniqueInput!
  data: ContactCustomValueUpdateWithoutContactDataInput!
}

input ContactCustomValueUpdateWithWhereUniqueWithoutOrgInput {
  where: ContactCustomValueWhereUniqueInput!
  data: ContactCustomValueUpdateWithoutOrgDataInput!
}

input ContactCustomValueUpsertWithWhereUniqueWithoutContactCustomFieldInput {
  where: ContactCustomValueWhereUniqueInput!
  update: ContactCustomValueUpdateWithoutContactCustomFieldDataInput!
  create: ContactCustomValueCreateWithoutContactCustomFieldInput!
}

input ContactCustomValueUpsertWithWhereUniqueWithoutContactInput {
  where: ContactCustomValueWhereUniqueInput!
  update: ContactCustomValueUpdateWithoutContactDataInput!
  create: ContactCustomValueCreateWithoutContactInput!
}

input ContactCustomValueUpsertWithWhereUniqueWithoutOrgInput {
  where: ContactCustomValueWhereUniqueInput!
  update: ContactCustomValueUpdateWithoutOrgDataInput!
  create: ContactCustomValueCreateWithoutOrgInput!
}

input ContactCustomValueWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  contact: ContactWhereInput
  contactCustomField: ContactCustomFieldWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  org: OrgWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ContactCustomValueWhereInput!]
  OR: [ContactCustomValueWhereInput!]
  NOT: [ContactCustomValueWhereInput!]
}

input ContactCustomValueWhereUniqueInput {
  id: Int
}

type ContactEdge {
  node: Contact!
  cursor: String!
}

enum ContactOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  first_ASC
  first_DESC
  last_ASC
  last_DESC
  middle_ASC
  middle_DESC
  phone_ASC
  phone_DESC
  state_ASC
  state_DESC
  streetAddress_ASC
  streetAddress_DESC
  updatedAt_ASC
  updatedAt_DESC
  zip_ASC
  zip_DESC
}

type ContactPreviousValues {
  id: Int!
  city: String
  createdAt: DateTime
  email: String
  first: String!
  last: String!
  middle: String
  phone: String
  state: String!
  streetAddress: String
  updatedAt: DateTime
  zip: String
}

input ContactScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  first: String
  first_not: String
  first_in: [String!]
  first_not_in: [String!]
  first_lt: String
  first_lte: String
  first_gt: String
  first_gte: String
  first_contains: String
  first_not_contains: String
  first_starts_with: String
  first_not_starts_with: String
  first_ends_with: String
  first_not_ends_with: String
  last: String
  last_not: String
  last_in: [String!]
  last_not_in: [String!]
  last_lt: String
  last_lte: String
  last_gt: String
  last_gte: String
  last_contains: String
  last_not_contains: String
  last_starts_with: String
  last_not_starts_with: String
  last_ends_with: String
  last_not_ends_with: String
  middle: String
  middle_not: String
  middle_in: [String!]
  middle_not_in: [String!]
  middle_lt: String
  middle_lte: String
  middle_gt: String
  middle_gte: String
  middle_contains: String
  middle_not_contains: String
  middle_starts_with: String
  middle_not_starts_with: String
  middle_ends_with: String
  middle_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  streetAddress: String
  streetAddress_not: String
  streetAddress_in: [String!]
  streetAddress_not_in: [String!]
  streetAddress_lt: String
  streetAddress_lte: String
  streetAddress_gt: String
  streetAddress_gte: String
  streetAddress_contains: String
  streetAddress_not_contains: String
  streetAddress_starts_with: String
  streetAddress_not_starts_with: String
  streetAddress_ends_with: String
  streetAddress_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  AND: [ContactScalarWhereInput!]
  OR: [ContactScalarWhereInput!]
  NOT: [ContactScalarWhereInput!]
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
  AND: [ContactSubscriptionWhereInput!]
  OR: [ContactSubscriptionWhereInput!]
  NOT: [ContactSubscriptionWhereInput!]
}

input ContactUpdateInput {
  accounts: AccountUpdateManyWithoutPrimaryContactInput
  city: String
  contactCustomValues: ContactCustomValueUpdateManyWithoutContactInput
  email: String
  first: String
  last: String
  middle: String
  org: OrgUpdateOneRequiredWithoutContactsInput
  phone: String
  state: String
  streetAddress: String
  users: UserUpdateManyWithoutContactInput
  zip: String
}

input ContactUpdateManyDataInput {
  city: String
  email: String
  first: String
  last: String
  middle: String
  phone: String
  state: String
  streetAddress: String
  zip: String
}

input ContactUpdateManyMutationInput {
  city: String
  email: String
  first: String
  last: String
  middle: String
  phone: String
  state: String
  streetAddress: String
  zip: String
}

input ContactUpdateManyWithoutOrgInput {
  create: [ContactCreateWithoutOrgInput!]
  delete: [ContactWhereUniqueInput!]
  connect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  disconnect: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [ContactScalarWhereInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
}

input ContactUpdateManyWithWhereNestedInput {
  where: ContactScalarWhereInput!
  data: ContactUpdateManyDataInput!
}

input ContactUpdateOneRequiredWithoutAccountsInput {
  create: ContactCreateWithoutAccountsInput
  update: ContactUpdateWithoutAccountsDataInput
  upsert: ContactUpsertWithoutAccountsInput
  connect: ContactWhereUniqueInput
}

input ContactUpdateOneRequiredWithoutContactCustomValuesInput {
  create: ContactCreateWithoutContactCustomValuesInput
  update: ContactUpdateWithoutContactCustomValuesDataInput
  upsert: ContactUpsertWithoutContactCustomValuesInput
  connect: ContactWhereUniqueInput
}

input ContactUpdateOneRequiredWithoutUsersInput {
  create: ContactCreateWithoutUsersInput
  update: ContactUpdateWithoutUsersDataInput
  upsert: ContactUpsertWithoutUsersInput
  connect: ContactWhereUniqueInput
}

input ContactUpdateWithoutAccountsDataInput {
  city: String
  contactCustomValues: ContactCustomValueUpdateManyWithoutContactInput
  email: String
  first: String
  last: String
  middle: String
  org: OrgUpdateOneRequiredWithoutContactsInput
  phone: String
  state: String
  streetAddress: String
  users: UserUpdateManyWithoutContactInput
  zip: String
}

input ContactUpdateWithoutContactCustomValuesDataInput {
  accounts: AccountUpdateManyWithoutPrimaryContactInput
  city: String
  email: String
  first: String
  last: String
  middle: String
  org: OrgUpdateOneRequiredWithoutContactsInput
  phone: String
  state: String
  streetAddress: String
  users: UserUpdateManyWithoutContactInput
  zip: String
}

input ContactUpdateWithoutOrgDataInput {
  accounts: AccountUpdateManyWithoutPrimaryContactInput
  city: String
  contactCustomValues: ContactCustomValueUpdateManyWithoutContactInput
  email: String
  first: String
  last: String
  middle: String
  phone: String
  state: String
  streetAddress: String
  users: UserUpdateManyWithoutContactInput
  zip: String
}

input ContactUpdateWithoutUsersDataInput {
  accounts: AccountUpdateManyWithoutPrimaryContactInput
  city: String
  contactCustomValues: ContactCustomValueUpdateManyWithoutContactInput
  email: String
  first: String
  last: String
  middle: String
  org: OrgUpdateOneRequiredWithoutContactsInput
  phone: String
  state: String
  streetAddress: String
  zip: String
}

input ContactUpdateWithWhereUniqueWithoutOrgInput {
  where: ContactWhereUniqueInput!
  data: ContactUpdateWithoutOrgDataInput!
}

input ContactUpsertWithoutAccountsInput {
  update: ContactUpdateWithoutAccountsDataInput!
  create: ContactCreateWithoutAccountsInput!
}

input ContactUpsertWithoutContactCustomValuesInput {
  update: ContactUpdateWithoutContactCustomValuesDataInput!
  create: ContactCreateWithoutContactCustomValuesInput!
}

input ContactUpsertWithoutUsersInput {
  update: ContactUpdateWithoutUsersDataInput!
  create: ContactCreateWithoutUsersInput!
}

input ContactUpsertWithWhereUniqueWithoutOrgInput {
  where: ContactWhereUniqueInput!
  update: ContactUpdateWithoutOrgDataInput!
  create: ContactCreateWithoutOrgInput!
}

input ContactWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  accounts_every: AccountWhereInput
  accounts_some: AccountWhereInput
  accounts_none: AccountWhereInput
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  contactCustomValues_every: ContactCustomValueWhereInput
  contactCustomValues_some: ContactCustomValueWhereInput
  contactCustomValues_none: ContactCustomValueWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  first: String
  first_not: String
  first_in: [String!]
  first_not_in: [String!]
  first_lt: String
  first_lte: String
  first_gt: String
  first_gte: String
  first_contains: String
  first_not_contains: String
  first_starts_with: String
  first_not_starts_with: String
  first_ends_with: String
  first_not_ends_with: String
  last: String
  last_not: String
  last_in: [String!]
  last_not_in: [String!]
  last_lt: String
  last_lte: String
  last_gt: String
  last_gte: String
  last_contains: String
  last_not_contains: String
  last_starts_with: String
  last_not_starts_with: String
  last_ends_with: String
  last_not_ends_with: String
  middle: String
  middle_not: String
  middle_in: [String!]
  middle_not_in: [String!]
  middle_lt: String
  middle_lte: String
  middle_gt: String
  middle_gte: String
  middle_contains: String
  middle_not_contains: String
  middle_starts_with: String
  middle_not_starts_with: String
  middle_ends_with: String
  middle_not_ends_with: String
  org: OrgWhereInput
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  streetAddress: String
  streetAddress_not: String
  streetAddress_in: [String!]
  streetAddress_not_in: [String!]
  streetAddress_lt: String
  streetAddress_lte: String
  streetAddress_gt: String
  streetAddress_gte: String
  streetAddress_contains: String
  streetAddress_not_contains: String
  streetAddress_starts_with: String
  streetAddress_not_starts_with: String
  streetAddress_ends_with: String
  streetAddress_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
}

input ContactWhereUniqueInput {
  id: Int
}

scalar DateTime

type Job {
  id: Int!
  attempts: Boolean!
  availableAt: Int!
  createdAt: Int!
  payload: String!
  queue: String!
  reservedAt: Int
}

type JobConnection {
  pageInfo: PageInfo!
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  id: Int
  attempts: Boolean!
  availableAt: Int!
  payload: String!
  queue: String!
  reservedAt: Int
}

type JobEdge {
  node: Job!
  cursor: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  attempts_ASC
  attempts_DESC
  availableAt_ASC
  availableAt_DESC
  createdAt_ASC
  createdAt_DESC
  payload_ASC
  payload_DESC
  queue_ASC
  queue_DESC
  reservedAt_ASC
  reservedAt_DESC
}

type JobPreviousValues {
  id: Int!
  attempts: Boolean!
  availableAt: Int!
  createdAt: Int!
  payload: String!
  queue: String!
  reservedAt: Int
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobWhereInput
  AND: [JobSubscriptionWhereInput!]
  OR: [JobSubscriptionWhereInput!]
  NOT: [JobSubscriptionWhereInput!]
}

input JobUpdateInput {
  attempts: Boolean
  availableAt: Int
  payload: String
  queue: String
  reservedAt: Int
}

input JobUpdateManyMutationInput {
  attempts: Boolean
  availableAt: Int
  payload: String
  queue: String
  reservedAt: Int
}

input JobWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  attempts: Boolean
  attempts_not: Boolean
  availableAt: Int
  availableAt_not: Int
  availableAt_in: [Int!]
  availableAt_not_in: [Int!]
  availableAt_lt: Int
  availableAt_lte: Int
  availableAt_gt: Int
  availableAt_gte: Int
  createdAt: Int
  createdAt_not: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  createdAt_lt: Int
  createdAt_lte: Int
  createdAt_gt: Int
  createdAt_gte: Int
  payload: String
  payload_not: String
  payload_in: [String!]
  payload_not_in: [String!]
  payload_lt: String
  payload_lte: String
  payload_gt: String
  payload_gte: String
  payload_contains: String
  payload_not_contains: String
  payload_starts_with: String
  payload_not_starts_with: String
  payload_ends_with: String
  payload_not_ends_with: String
  queue: String
  queue_not: String
  queue_in: [String!]
  queue_not_in: [String!]
  queue_lt: String
  queue_lte: String
  queue_gt: String
  queue_gte: String
  queue_contains: String
  queue_not_contains: String
  queue_starts_with: String
  queue_not_starts_with: String
  queue_ends_with: String
  queue_not_ends_with: String
  reservedAt: Int
  reservedAt_not: Int
  reservedAt_in: [Int!]
  reservedAt_not_in: [Int!]
  reservedAt_lt: Int
  reservedAt_lte: Int
  reservedAt_gt: Int
  reservedAt_gte: Int
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input JobWhereUniqueInput {
  id: Int
}

scalar Json

scalar Long

type Migration {
  id: Int!
  batch: Int!
  migration: String!
}

type MigrationConnection {
  pageInfo: PageInfo!
  edges: [MigrationEdge]!
  aggregate: AggregateMigration!
}

input MigrationCreateInput {
  id: Int
  batch: Int!
  migration: String!
}

type MigrationEdge {
  node: Migration!
  cursor: String!
}

enum MigrationOrderByInput {
  id_ASC
  id_DESC
  batch_ASC
  batch_DESC
  migration_ASC
  migration_DESC
}

type MigrationPreviousValues {
  id: Int!
  batch: Int!
  migration: String!
}

type MigrationSubscriptionPayload {
  mutation: MutationType!
  node: Migration
  updatedFields: [String!]
  previousValues: MigrationPreviousValues
}

input MigrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MigrationWhereInput
  AND: [MigrationSubscriptionWhereInput!]
  OR: [MigrationSubscriptionWhereInput!]
  NOT: [MigrationSubscriptionWhereInput!]
}

input MigrationUpdateInput {
  batch: Int
  migration: String
}

input MigrationUpdateManyMutationInput {
  batch: Int
  migration: String
}

input MigrationWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  batch: Int
  batch_not: Int
  batch_in: [Int!]
  batch_not_in: [Int!]
  batch_lt: Int
  batch_lte: Int
  batch_gt: Int
  batch_gte: Int
  migration: String
  migration_not: String
  migration_in: [String!]
  migration_not_in: [String!]
  migration_lt: String
  migration_lte: String
  migration_gt: String
  migration_gte: String
  migration_contains: String
  migration_not_contains: String
  migration_starts_with: String
  migration_not_starts_with: String
  migration_ends_with: String
  migration_not_ends_with: String
  AND: [MigrationWhereInput!]
  OR: [MigrationWhereInput!]
  NOT: [MigrationWhereInput!]
}

input MigrationWhereUniqueInput {
  id: Int
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateManyAccounts(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  createAccountCustomField(data: AccountCustomFieldCreateInput!): AccountCustomField!
  updateAccountCustomField(data: AccountCustomFieldUpdateInput!, where: AccountCustomFieldWhereUniqueInput!): AccountCustomField
  updateManyAccountCustomFields(data: AccountCustomFieldUpdateManyMutationInput!, where: AccountCustomFieldWhereInput): BatchPayload!
  upsertAccountCustomField(where: AccountCustomFieldWhereUniqueInput!, create: AccountCustomFieldCreateInput!, update: AccountCustomFieldUpdateInput!): AccountCustomField!
  deleteAccountCustomField(where: AccountCustomFieldWhereUniqueInput!): AccountCustomField
  deleteManyAccountCustomFields(where: AccountCustomFieldWhereInput): BatchPayload!
  createAccountCustomValue(data: AccountCustomValueCreateInput!): AccountCustomValue!
  updateAccountCustomValue(data: AccountCustomValueUpdateInput!, where: AccountCustomValueWhereUniqueInput!): AccountCustomValue
  updateManyAccountCustomValues(data: AccountCustomValueUpdateManyMutationInput!, where: AccountCustomValueWhereInput): BatchPayload!
  upsertAccountCustomValue(where: AccountCustomValueWhereUniqueInput!, create: AccountCustomValueCreateInput!, update: AccountCustomValueUpdateInput!): AccountCustomValue!
  deleteAccountCustomValue(where: AccountCustomValueWhereUniqueInput!): AccountCustomValue
  deleteManyAccountCustomValues(where: AccountCustomValueWhereInput): BatchPayload!
  createAdmin(data: AdminCreateInput!): Admin!
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateManyAdmins(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): BatchPayload!
  upsertAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteManyAdmins(where: AdminWhereInput): BatchPayload!
  createContact(data: ContactCreateInput!): Contact!
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateManyContacts(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  upsertContact(where: ContactWhereUniqueInput!, create: ContactCreateInput!, update: ContactUpdateInput!): Contact!
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteManyContacts(where: ContactWhereInput): BatchPayload!
  createContactCustomField(data: ContactCustomFieldCreateInput!): ContactCustomField!
  updateContactCustomField(data: ContactCustomFieldUpdateInput!, where: ContactCustomFieldWhereUniqueInput!): ContactCustomField
  updateManyContactCustomFields(data: ContactCustomFieldUpdateManyMutationInput!, where: ContactCustomFieldWhereInput): BatchPayload!
  upsertContactCustomField(where: ContactCustomFieldWhereUniqueInput!, create: ContactCustomFieldCreateInput!, update: ContactCustomFieldUpdateInput!): ContactCustomField!
  deleteContactCustomField(where: ContactCustomFieldWhereUniqueInput!): ContactCustomField
  deleteManyContactCustomFields(where: ContactCustomFieldWhereInput): BatchPayload!
  createContactCustomValue(data: ContactCustomValueCreateInput!): ContactCustomValue!
  updateContactCustomValue(data: ContactCustomValueUpdateInput!, where: ContactCustomValueWhereUniqueInput!): ContactCustomValue
  updateManyContactCustomValues(data: ContactCustomValueUpdateManyMutationInput!, where: ContactCustomValueWhereInput): BatchPayload!
  upsertContactCustomValue(where: ContactCustomValueWhereUniqueInput!, create: ContactCustomValueCreateInput!, update: ContactCustomValueUpdateInput!): ContactCustomValue!
  deleteContactCustomValue(where: ContactCustomValueWhereUniqueInput!): ContactCustomValue
  deleteManyContactCustomValues(where: ContactCustomValueWhereInput): BatchPayload!
  createJob(data: JobCreateInput!): Job!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updateManyJobs(data: JobUpdateManyMutationInput!, where: JobWhereInput): BatchPayload!
  upsertJob(where: JobWhereUniqueInput!, create: JobCreateInput!, update: JobUpdateInput!): Job!
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  createMigration(data: MigrationCreateInput!): Migration!
  updateMigration(data: MigrationUpdateInput!, where: MigrationWhereUniqueInput!): Migration
  updateManyMigrations(data: MigrationUpdateManyMutationInput!, where: MigrationWhereInput): BatchPayload!
  upsertMigration(where: MigrationWhereUniqueInput!, create: MigrationCreateInput!, update: MigrationUpdateInput!): Migration!
  deleteMigration(where: MigrationWhereUniqueInput!): Migration
  deleteManyMigrations(where: MigrationWhereInput): BatchPayload!
  createOrg(data: OrgCreateInput!): Org!
  updateOrg(data: OrgUpdateInput!, where: OrgWhereUniqueInput!): Org
  updateManyOrgs(data: OrgUpdateManyMutationInput!, where: OrgWhereInput): BatchPayload!
  upsertOrg(where: OrgWhereUniqueInput!, create: OrgCreateInput!, update: OrgUpdateInput!): Org!
  deleteOrg(where: OrgWhereUniqueInput!): Org
  deleteManyOrgs(where: OrgWhereInput): BatchPayload!
  createPasswordReset(data: PasswordResetCreateInput!): PasswordReset!
  updateManyPasswordResets(data: PasswordResetUpdateManyMutationInput!, where: PasswordResetWhereInput): BatchPayload!
  deleteManyPasswordResets(where: PasswordResetWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Org {
  id: Int!
  accountCustomFields(where: AccountCustomFieldWhereInput, orderBy: AccountCustomFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccountCustomField!]
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account!]
  contactCustomFields(where: ContactCustomFieldWhereInput, orderBy: ContactCustomFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactCustomField!]
  contactCustomValues(where: ContactCustomValueWhereInput, orderBy: ContactCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactCustomValue!]
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  createdAt: DateTime
  name: String!
  phone: String!
  primaryEmail: String!
  updatedAt: DateTime
}

type OrgConnection {
  pageInfo: PageInfo!
  edges: [OrgEdge]!
  aggregate: AggregateOrg!
}

input OrgCreateInput {
  id: Int
  accountCustomFields: AccountCustomFieldCreateManyWithoutOrgInput
  accounts: AccountCreateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldCreateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueCreateManyWithoutOrgInput
  contacts: ContactCreateManyWithoutOrgInput
  name: String!
  phone: String!
  primaryEmail: String!
}

input OrgCreateOneWithoutAccountCustomFieldsInput {
  create: OrgCreateWithoutAccountCustomFieldsInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutAccountsInput {
  create: OrgCreateWithoutAccountsInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutContactCustomFieldsInput {
  create: OrgCreateWithoutContactCustomFieldsInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutContactCustomValuesInput {
  create: OrgCreateWithoutContactCustomValuesInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutContactsInput {
  create: OrgCreateWithoutContactsInput
  connect: OrgWhereUniqueInput
}

input OrgCreateWithoutAccountCustomFieldsInput {
  id: Int
  accounts: AccountCreateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldCreateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueCreateManyWithoutOrgInput
  contacts: ContactCreateManyWithoutOrgInput
  name: String!
  phone: String!
  primaryEmail: String!
}

input OrgCreateWithoutAccountsInput {
  id: Int
  accountCustomFields: AccountCustomFieldCreateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldCreateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueCreateManyWithoutOrgInput
  contacts: ContactCreateManyWithoutOrgInput
  name: String!
  phone: String!
  primaryEmail: String!
}

input OrgCreateWithoutContactCustomFieldsInput {
  id: Int
  accountCustomFields: AccountCustomFieldCreateManyWithoutOrgInput
  accounts: AccountCreateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueCreateManyWithoutOrgInput
  contacts: ContactCreateManyWithoutOrgInput
  name: String!
  phone: String!
  primaryEmail: String!
}

input OrgCreateWithoutContactCustomValuesInput {
  id: Int
  accountCustomFields: AccountCustomFieldCreateManyWithoutOrgInput
  accounts: AccountCreateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldCreateManyWithoutOrgInput
  contacts: ContactCreateManyWithoutOrgInput
  name: String!
  phone: String!
  primaryEmail: String!
}

input OrgCreateWithoutContactsInput {
  id: Int
  accountCustomFields: AccountCustomFieldCreateManyWithoutOrgInput
  accounts: AccountCreateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldCreateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueCreateManyWithoutOrgInput
  name: String!
  phone: String!
  primaryEmail: String!
}

type OrgEdge {
  node: Org!
  cursor: String!
}

enum OrgOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  primaryEmail_ASC
  primaryEmail_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrgPreviousValues {
  id: Int!
  createdAt: DateTime
  name: String!
  phone: String!
  primaryEmail: String!
  updatedAt: DateTime
}

type OrgSubscriptionPayload {
  mutation: MutationType!
  node: Org
  updatedFields: [String!]
  previousValues: OrgPreviousValues
}

input OrgSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrgWhereInput
  AND: [OrgSubscriptionWhereInput!]
  OR: [OrgSubscriptionWhereInput!]
  NOT: [OrgSubscriptionWhereInput!]
}

input OrgUpdateInput {
  accountCustomFields: AccountCustomFieldUpdateManyWithoutOrgInput
  accounts: AccountUpdateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldUpdateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueUpdateManyWithoutOrgInput
  contacts: ContactUpdateManyWithoutOrgInput
  name: String
  phone: String
  primaryEmail: String
}

input OrgUpdateManyMutationInput {
  name: String
  phone: String
  primaryEmail: String
}

input OrgUpdateOneRequiredWithoutAccountCustomFieldsInput {
  create: OrgCreateWithoutAccountCustomFieldsInput
  update: OrgUpdateWithoutAccountCustomFieldsDataInput
  upsert: OrgUpsertWithoutAccountCustomFieldsInput
  connect: OrgWhereUniqueInput
}

input OrgUpdateOneRequiredWithoutAccountsInput {
  create: OrgCreateWithoutAccountsInput
  update: OrgUpdateWithoutAccountsDataInput
  upsert: OrgUpsertWithoutAccountsInput
  connect: OrgWhereUniqueInput
}

input OrgUpdateOneRequiredWithoutContactCustomFieldsInput {
  create: OrgCreateWithoutContactCustomFieldsInput
  update: OrgUpdateWithoutContactCustomFieldsDataInput
  upsert: OrgUpsertWithoutContactCustomFieldsInput
  connect: OrgWhereUniqueInput
}

input OrgUpdateOneRequiredWithoutContactCustomValuesInput {
  create: OrgCreateWithoutContactCustomValuesInput
  update: OrgUpdateWithoutContactCustomValuesDataInput
  upsert: OrgUpsertWithoutContactCustomValuesInput
  connect: OrgWhereUniqueInput
}

input OrgUpdateOneRequiredWithoutContactsInput {
  create: OrgCreateWithoutContactsInput
  update: OrgUpdateWithoutContactsDataInput
  upsert: OrgUpsertWithoutContactsInput
  connect: OrgWhereUniqueInput
}

input OrgUpdateWithoutAccountCustomFieldsDataInput {
  accounts: AccountUpdateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldUpdateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueUpdateManyWithoutOrgInput
  contacts: ContactUpdateManyWithoutOrgInput
  name: String
  phone: String
  primaryEmail: String
}

input OrgUpdateWithoutAccountsDataInput {
  accountCustomFields: AccountCustomFieldUpdateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldUpdateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueUpdateManyWithoutOrgInput
  contacts: ContactUpdateManyWithoutOrgInput
  name: String
  phone: String
  primaryEmail: String
}

input OrgUpdateWithoutContactCustomFieldsDataInput {
  accountCustomFields: AccountCustomFieldUpdateManyWithoutOrgInput
  accounts: AccountUpdateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueUpdateManyWithoutOrgInput
  contacts: ContactUpdateManyWithoutOrgInput
  name: String
  phone: String
  primaryEmail: String
}

input OrgUpdateWithoutContactCustomValuesDataInput {
  accountCustomFields: AccountCustomFieldUpdateManyWithoutOrgInput
  accounts: AccountUpdateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldUpdateManyWithoutOrgInput
  contacts: ContactUpdateManyWithoutOrgInput
  name: String
  phone: String
  primaryEmail: String
}

input OrgUpdateWithoutContactsDataInput {
  accountCustomFields: AccountCustomFieldUpdateManyWithoutOrgInput
  accounts: AccountUpdateManyWithoutOrgInput
  contactCustomFields: ContactCustomFieldUpdateManyWithoutOrgInput
  contactCustomValues: ContactCustomValueUpdateManyWithoutOrgInput
  name: String
  phone: String
  primaryEmail: String
}

input OrgUpsertWithoutAccountCustomFieldsInput {
  update: OrgUpdateWithoutAccountCustomFieldsDataInput!
  create: OrgCreateWithoutAccountCustomFieldsInput!
}

input OrgUpsertWithoutAccountsInput {
  update: OrgUpdateWithoutAccountsDataInput!
  create: OrgCreateWithoutAccountsInput!
}

input OrgUpsertWithoutContactCustomFieldsInput {
  update: OrgUpdateWithoutContactCustomFieldsDataInput!
  create: OrgCreateWithoutContactCustomFieldsInput!
}

input OrgUpsertWithoutContactCustomValuesInput {
  update: OrgUpdateWithoutContactCustomValuesDataInput!
  create: OrgCreateWithoutContactCustomValuesInput!
}

input OrgUpsertWithoutContactsInput {
  update: OrgUpdateWithoutContactsDataInput!
  create: OrgCreateWithoutContactsInput!
}

input OrgWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  accountCustomFields_every: AccountCustomFieldWhereInput
  accountCustomFields_some: AccountCustomFieldWhereInput
  accountCustomFields_none: AccountCustomFieldWhereInput
  accounts_every: AccountWhereInput
  accounts_some: AccountWhereInput
  accounts_none: AccountWhereInput
  contactCustomFields_every: ContactCustomFieldWhereInput
  contactCustomFields_some: ContactCustomFieldWhereInput
  contactCustomFields_none: ContactCustomFieldWhereInput
  contactCustomValues_every: ContactCustomValueWhereInput
  contactCustomValues_some: ContactCustomValueWhereInput
  contactCustomValues_none: ContactCustomValueWhereInput
  contacts_every: ContactWhereInput
  contacts_some: ContactWhereInput
  contacts_none: ContactWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  primaryEmail: String
  primaryEmail_not: String
  primaryEmail_in: [String!]
  primaryEmail_not_in: [String!]
  primaryEmail_lt: String
  primaryEmail_lte: String
  primaryEmail_gt: String
  primaryEmail_gte: String
  primaryEmail_contains: String
  primaryEmail_not_contains: String
  primaryEmail_starts_with: String
  primaryEmail_not_starts_with: String
  primaryEmail_ends_with: String
  primaryEmail_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrgWhereInput!]
  OR: [OrgWhereInput!]
  NOT: [OrgWhereInput!]
}

input OrgWhereUniqueInput {
  id: Int
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PasswordReset {
  createdAt: DateTime
  email: String!
  token: String!
}

type PasswordResetConnection {
  pageInfo: PageInfo!
  edges: [PasswordResetEdge]!
  aggregate: AggregatePasswordReset!
}

input PasswordResetCreateInput {
  email: String!
  token: String!
}

type PasswordResetEdge {
  node: PasswordReset!
  cursor: String!
}

enum PasswordResetOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  token_ASC
  token_DESC
}

type PasswordResetPreviousValues {
  createdAt: DateTime
  email: String!
  token: String!
}

type PasswordResetSubscriptionPayload {
  mutation: MutationType!
  node: PasswordReset
  updatedFields: [String!]
  previousValues: PasswordResetPreviousValues
}

input PasswordResetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PasswordResetWhereInput
  AND: [PasswordResetSubscriptionWhereInput!]
  OR: [PasswordResetSubscriptionWhereInput!]
  NOT: [PasswordResetSubscriptionWhereInput!]
}

input PasswordResetUpdateManyMutationInput {
  email: String
  token: String
}

input PasswordResetWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  AND: [PasswordResetWhereInput!]
  OR: [PasswordResetWhereInput!]
  NOT: [PasswordResetWhereInput!]
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  accountCustomField(where: AccountCustomFieldWhereUniqueInput!): AccountCustomField
  accountCustomFields(where: AccountCustomFieldWhereInput, orderBy: AccountCustomFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccountCustomField]!
  accountCustomFieldsConnection(where: AccountCustomFieldWhereInput, orderBy: AccountCustomFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountCustomFieldConnection!
  accountCustomValue(where: AccountCustomValueWhereUniqueInput!): AccountCustomValue
  accountCustomValues(where: AccountCustomValueWhereInput, orderBy: AccountCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccountCustomValue]!
  accountCustomValuesConnection(where: AccountCustomValueWhereInput, orderBy: AccountCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountCustomValueConnection!
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Admin]!
  adminsConnection(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminConnection!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!
  contactCustomField(where: ContactCustomFieldWhereUniqueInput!): ContactCustomField
  contactCustomFields(where: ContactCustomFieldWhereInput, orderBy: ContactCustomFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactCustomField]!
  contactCustomFieldsConnection(where: ContactCustomFieldWhereInput, orderBy: ContactCustomFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactCustomFieldConnection!
  contactCustomValue(where: ContactCustomValueWhereUniqueInput!): ContactCustomValue
  contactCustomValues(where: ContactCustomValueWhereInput, orderBy: ContactCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactCustomValue]!
  contactCustomValuesConnection(where: ContactCustomValueWhereInput, orderBy: ContactCustomValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactCustomValueConnection!
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  migration(where: MigrationWhereUniqueInput!): Migration
  migrations(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Migration]!
  migrationsConnection(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MigrationConnection!
  org(where: OrgWhereUniqueInput!): Org
  orgs(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Org]!
  orgsConnection(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrgConnection!
  passwordResets(where: PasswordResetWhereInput, orderBy: PasswordResetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PasswordReset]!
  passwordResetsConnection(where: PasswordResetWhereInput, orderBy: PasswordResetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PasswordResetConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  accountCustomField(where: AccountCustomFieldSubscriptionWhereInput): AccountCustomFieldSubscriptionPayload
  accountCustomValue(where: AccountCustomValueSubscriptionWhereInput): AccountCustomValueSubscriptionPayload
  admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
  contactCustomField(where: ContactCustomFieldSubscriptionWhereInput): ContactCustomFieldSubscriptionPayload
  contactCustomValue(where: ContactCustomValueSubscriptionWhereInput): ContactCustomValueSubscriptionPayload
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
  migration(where: MigrationSubscriptionWhereInput): MigrationSubscriptionPayload
  org(where: OrgSubscriptionWhereInput): OrgSubscriptionPayload
  passwordReset(where: PasswordResetSubscriptionWhereInput): PasswordResetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: Int!
  contact: Contact!
  createdAt: DateTime
  email: String!
  emailVerifiedAt: DateTime
  orgId: Int!
  password: String!
  rememberToken: String
  role: UsersRoleEnum!
  updatedAt: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: Int
  contact: ContactCreateOneWithoutUsersInput!
  email: String!
  emailVerifiedAt: DateTime
  orgId: Int!
  password: String!
  rememberToken: String
  role: UsersRoleEnum
}

input UserCreateManyWithoutContactInput {
  create: [UserCreateWithoutContactInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutContactInput {
  id: Int
  email: String!
  emailVerifiedAt: DateTime
  orgId: Int!
  password: String!
  rememberToken: String
  role: UsersRoleEnum
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  emailVerifiedAt_ASC
  emailVerifiedAt_DESC
  orgId_ASC
  orgId_DESC
  password_ASC
  password_DESC
  rememberToken_ASC
  rememberToken_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: Int!
  createdAt: DateTime
  email: String!
  emailVerifiedAt: DateTime
  orgId: Int!
  password: String!
  rememberToken: String
  role: UsersRoleEnum!
  updatedAt: DateTime
}

input UserScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  emailVerifiedAt: DateTime
  emailVerifiedAt_not: DateTime
  emailVerifiedAt_in: [DateTime!]
  emailVerifiedAt_not_in: [DateTime!]
  emailVerifiedAt_lt: DateTime
  emailVerifiedAt_lte: DateTime
  emailVerifiedAt_gt: DateTime
  emailVerifiedAt_gte: DateTime
  orgId: Int
  orgId_not: Int
  orgId_in: [Int!]
  orgId_not_in: [Int!]
  orgId_lt: Int
  orgId_lte: Int
  orgId_gt: Int
  orgId_gte: Int
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  rememberToken: String
  rememberToken_not: String
  rememberToken_in: [String!]
  rememberToken_not_in: [String!]
  rememberToken_lt: String
  rememberToken_lte: String
  rememberToken_gt: String
  rememberToken_gte: String
  rememberToken_contains: String
  rememberToken_not_contains: String
  rememberToken_starts_with: String
  rememberToken_not_starts_with: String
  rememberToken_ends_with: String
  rememberToken_not_ends_with: String
  role: UsersRoleEnum
  role_not: UsersRoleEnum
  role_in: [UsersRoleEnum!]
  role_not_in: [UsersRoleEnum!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

enum UsersRoleEnum {
  admin
  guest
  manager
  sys_admin
  user
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  contact: ContactUpdateOneRequiredWithoutUsersInput
  email: String
  emailVerifiedAt: DateTime
  orgId: Int
  password: String
  rememberToken: String
  role: UsersRoleEnum
}

input UserUpdateManyDataInput {
  email: String
  emailVerifiedAt: DateTime
  orgId: Int
  password: String
  rememberToken: String
  role: UsersRoleEnum
}

input UserUpdateManyMutationInput {
  email: String
  emailVerifiedAt: DateTime
  orgId: Int
  password: String
  rememberToken: String
  role: UsersRoleEnum
}

input UserUpdateManyWithoutContactInput {
  create: [UserCreateWithoutContactInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutContactInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutContactInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutContactDataInput {
  email: String
  emailVerifiedAt: DateTime
  orgId: Int
  password: String
  rememberToken: String
  role: UsersRoleEnum
}

input UserUpdateWithWhereUniqueWithoutContactInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutContactDataInput!
}

input UserUpsertWithWhereUniqueWithoutContactInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutContactDataInput!
  create: UserCreateWithoutContactInput!
}

input UserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  contact: ContactWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  emailVerifiedAt: DateTime
  emailVerifiedAt_not: DateTime
  emailVerifiedAt_in: [DateTime!]
  emailVerifiedAt_not_in: [DateTime!]
  emailVerifiedAt_lt: DateTime
  emailVerifiedAt_lte: DateTime
  emailVerifiedAt_gt: DateTime
  emailVerifiedAt_gte: DateTime
  orgId: Int
  orgId_not: Int
  orgId_in: [Int!]
  orgId_not_in: [Int!]
  orgId_lt: Int
  orgId_lte: Int
  orgId_gt: Int
  orgId_gte: Int
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  rememberToken: String
  rememberToken_not: String
  rememberToken_in: [String!]
  rememberToken_not_in: [String!]
  rememberToken_lt: String
  rememberToken_lte: String
  rememberToken_gt: String
  rememberToken_gte: String
  rememberToken_contains: String
  rememberToken_not_contains: String
  rememberToken_starts_with: String
  rememberToken_not_starts_with: String
  rememberToken_ends_with: String
  rememberToken_not_ends_with: String
  role: UsersRoleEnum
  role_not: UsersRoleEnum
  role_in: [UsersRoleEnum!]
  role_not_in: [UsersRoleEnum!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
  email: String
}
`
      }
    