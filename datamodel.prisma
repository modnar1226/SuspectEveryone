type Account @db(name: "accounts") {
  id: Int! @id
  accountCustomValues: [AccountCustomValue]
  city: String!
  createdAt: DateTime @db(name: "created_at")
  name: String!
  org: Org! @db(name: "org_id")
  primaryContact: Contact! @db(name: "primary_contact_id")
  primaryEmail: String! @db(name: "primary_email")
  primaryPhone: String! @db(name: "primary_phone")
  state: String!
  streetAddress: String! @db(name: "street_address")
  updatedAt: DateTime @db(name: "updated_at")
  zip: String!
}

type AccountCustomField @db(name: "account_custom_fields") {
  id: Int! @id
  accountCustomValues: [AccountCustomValue]
  createdAt: DateTime @db(name: "created_at")
  fieldName: String! @db(name: "field_name")
  label: String!
  max: String
  min: String
  options: Json
  org: Org! @db(name: "org_id")
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
  updatedAt: DateTime @db(name: "updated_at")
}

type AccountCustomValue @db(name: "account_custom_values") {
  id: Int! @id
  account: Account! @db(name: "account_id")
  accountCustomField: AccountCustomField! @db(name: "account_custom_field_id")
  createdAt: DateTime @db(name: "created_at")
  updatedAt: DateTime @db(name: "updated_at")
  value: String!
}

type Admin @db(name: "admins") {
  id: Int! @id
  address: String!
  city: String!
  createdAt: DateTime @db(name: "created_at")
  email: String! @unique
  first: String!
  isSuper: Boolean! @db(name: "is_super") @default(value: 0)
  last: String!
  password: String!
  rememberToken: String @db(name: "remember_token")
  state: String!
  updatedAt: DateTime @db(name: "updated_at")
  zip: String!
}

type Contact @db(name: "contacts") {
  id: Int! @id
  accounts: [Account]
  city: String
  contactCustomValues: [ContactCustomValue]
  createdAt: DateTime @db(name: "created_at")
  email: String
  first: String!
  last: String!
  middle: String
  org: Org! @db(name: "org_id")
  phone: String
  state: String!
  streetAddress: String @db(name: "street_address")
  updatedAt: DateTime @db(name: "updated_at")
  users: [User]
  zip: String
}

type ContactCustomField @db(name: "contact_custom_fields") {
  id: Int! @id
  contactCustomValues: [ContactCustomValue]
  createdAt: DateTime @db(name: "created_at")
  fieldName: String! @db(name: "field_name")
  label: String!
  max: String
  min: String
  options: Json
  org: Org! @db(name: "org_id")
  placeholder: String
  required: Boolean!
  tag: String!
  type: String
  updatedAt: DateTime @db(name: "updated_at")
}

type ContactCustomValue @db(name: "contact_custom_values") {
  id: Int! @id
  contact: Contact! @db(name: "contact_id")
  contactCustomField: ContactCustomField! @db(name: "contact_custom_field_id")
  createdAt: DateTime @db(name: "created_at")
  org: Org! @db(name: "org_id")
  updatedAt: DateTime @db(name: "updated_at")
  value: String!
}

type Job @db(name: "jobs") {
  id: Int! @id
  attempts: Boolean!
  availableAt: Int! @db(name: "available_at")
  createdAt: Int! @db(name: "created_at")
  payload: String!
  queue: String!
  reservedAt: Int @db(name: "reserved_at")
}

type Migration @db(name: "migrations") {
  id: Int! @id
  batch: Int!
  migration: String!
}

type Org @db(name: "orgs") {
  id: Int! @id
  accountCustomFields: [AccountCustomField]
  accounts: [Account]
  contactCustomFields: [ContactCustomField]
  contactCustomValues: [ContactCustomValue]
  contacts: [Contact]
  createdAt: DateTime @db(name: "created_at")
  name: String!
  phone: String!
  primaryEmail: String! @db(name: "primary_email")
  updatedAt: DateTime @db(name: "updated_at")
}

type PasswordReset @db(name: "password_resets") {
  createdAt: DateTime @db(name: "created_at")
  email: String!
  token: String!
}

type User @db(name: "users") {
  id: Int! @id
  contact: Contact! @db(name: "contact_id")
  createdAt: DateTime @db(name: "created_at")
  email: String! @unique
  emailVerifiedAt: DateTime @db(name: "email_verified_at")
  orgId: Int! @db(name: "org_id")
  password: String!
  rememberToken: String @db(name: "remember_token")
  role: UsersRoleEnum! @default(value: guest)
  updatedAt: DateTime @db(name: "updated_at")
}

enum UsersRoleEnum {
  admin
  guest
  manager
  sys_admin
  user
}